@startuml

class Main {
    + Main(): void
}

class Console {
    + WriteLine(string value)
    + Write(string value)
    + ReadLine(): string
    + Clear()
    {static} +ForegroundColor: ConsoleColor
    {static} +BackgroundColor: ConsoleColor
}

class ConsoleDisplay extends Display {

}

abstract Display {
    + Display(Game game)
    + DisplayPlayer(Player: player)
    + GetCardChoice(List<ICards>: choices): ICard
}

abstract DeckCreator
{
    
}

class StandardGame extends Game{

}

abstract Game {
    - abstract PlayerLimmit: int
    - Players: List<Player>
    + Game(Display: display)
    + AddPlayer(Player: player)
    + StartGame()
}

class Player {
    - name: string
    - deck: Deck
    + Player(name: string, deck: Deck)
    + Name: string
    + Deck: Deck
}

class Deck {
    - allCards: List<Card>
    + Stacks: List<Stack>
    + GetStack(string stackName): stack 
    + AddStack(string Name)
}

class Stack {
    - stackCards: List<Card>
    + StackSize: int
    + StackName: string
    + AddCard(Card: card)
    + AddCard(IEnumarble<Card>: cards)
    + GetNextCard(): Card
    + Shuffle()
    + Sort()
}

class CardFactory
{
    - ConstuctedCard: Card
    + NewCard()
    + AddAttackDecorator(double: offset, Action: condition (Optional))
    + AddAttackDecorator(double: multiplyer, Action: condition (Optional))
    + AddDefenseDecorator(double: offset, Action: condition (Optional))
    + AddDefenseDecorator(double: multiplyer, Action: condition (Optional))
    + AddTrapAbilityDecorator(Action: Condition, Action: TrapAction)
    + GetConstructedCard(): Card
}

interface ICard {
    + Id: guid
    + Name: string
    + Description: string
    + GetUseCost(): int
    + GetUseAttack(): int
    + GetDefense(): int
}

abstract CardDecorator {
    + Id: guid
    + Name: string
    + DecorationName: String
    + Multaplyer: double
    + Offset: double
    + Condition: Action
    + CardDecorator(double multiplyer, double: offset)
    + AddCondition(Action: Condition)
    + Virtual GetUseCost(): int
    + Virtual GetUseAttack(): int
}

class AttackDecorator extends CardDecorator {
    + GetUseAttack(): int
}

class CostDecorator extends CardDecorator {
    + GetUseCost(): int
}

class TrapAbilityDecorator extends CardDecorator {
    + TrapAbility: Action
    + GetUseCost(): int
    + GetUseAttack(): int
    + GetDefense(): int
}

class StandardCard {
    + Id: guid
    + Name: string
    + StandardCard(double: UseCost, double: AttackDamage)
    + GetUseCost(): int
    + GetUseAttack(): int
    + GetDefense(): int
}


Main o-- StandardGame: Creates
Main o-- ConsoleDisplay: Creates
ConsoleDisplay *-- Console
Game *-- Display
Game "1" *-- "many" Player : Has many >

Player "1" *-- "1" Deck : Has a >
Deck "1" *-- "Many" Stack : Contains many >

Deck "1" *-- "Many" ICard : Contains many >
Stack "1" *-- "Many" ICard : Contains references to  >

StandardCard .|> ICard
CardDecorator .|> ICard
CardFactory "1" *-- "Many" StandardCard : Creates >
CardFactory "1" *-- "Many" AttackDecorator : Creates >
CardFactory "1" *-- "Many" CostDecorator : Creates >
CardFactory "1" *-- "Many" TrapAbilityDecorator : Creates >

@enduml