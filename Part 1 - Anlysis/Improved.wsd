@startuml

class Main {
    + Main(): void
    + SelectRunMode()
}

class Console {
    + WriteLine(string value)
    + Write(string value)
    + ReadLine(): string
    + Clear()
    {static} +ForegroundColor: ConsoleColor
    {static} +BackgroundColor: ConsoleColor
}

class ConsoleDisplay extends Display {
    + DisplayPlayer(Player: player)
    + GetCardChoice(List<ICards>: choices): ICard
}

abstract Display {
    + Display(Game game)
    + abstract DisplayPlayer(Player: player)
    + abstract GetCardChoice(List<ICards>: choices): ICard
}


class StandardGame extends Game{
    + GameLoop()
    + PlayerChoice()
}

abstract Game {
    - abstract PlayerLimmit: int
    - Players: List<Player>
    + Game(Display: display)
    + AddPlayer(Player: player)
    + StartGame()
    + abstract GameLoop()
    + abstract PlayerChoice()
}

class Player {
    + name: string
    + deck: Deck
    + Player(name: string, deck: Deck)
    + Name: string
    + Deck: Deck
}

class Deck {
    + allCards: List<Card>
    + Stacks: List<Stack>
    + GetStack(string stackName): stack
    + AddStack(string Name)
}

class Stack {
    + stackCards: List<Card>
    + StackSize: int
    + StackName: string
    + AddCard(Card: card)
    + AddCard(IEnumarble<Card>: cards)
    + GetNextCard(): Card
}

class SortableStack {
    + Sort()
}

class ShuffleableStack {
    + Shuffle()
}

class CardFactory
{
    - ConstuctedCard: Card
    + NewCard()
    + AddAttackDecorator(double: offset, Action: condition (Optional))
    + AddAttackDecorator(double: multiplyer, Action: condition (Optional))
    + AddDefenseDecorator(double: offset, Action: condition (Optional))
    + AddDefenseDecorator(double: multiplyer, Action: condition (Optional))
    + AddTrapAbilityDecorator(Action: Condition, Action: TrapAction)
    + GetConstructedCard(): Card
}

interface ICard {
    + Id: guid
    + Name: string
    + Description: string
    + GetUseCost(): int
    + GetUseAttack(): int
    + GetDefense(): int
}

abstract CardDecorator {
    + Id: guid
    + Name: string
    + DecorationName: String
    + Multaplyer: double
    + Offset: double
    + Condition: Action
    + CardDecorator(double multiplyer, double: offset)
    + AddCondition(Action: Condition)
    + Virtual GetUseCost(): int
    + Virtual GetUseAttack(): int
}

class AttackDecorator extends CardDecorator {
    + GetUseAttack(): int
}

class CostDecorator extends CardDecorator {
    + GetUseCost(): int
}

class DefenseDecorator extends CardDecorator {
    + GetDefense(): int
}
class StandardCard {
    + Id: guid
    + Name: string
    + StandardCard(double: UseCost, double: AttackDamage)
    + GetUseCost(): int
    + GetUseAttack(): int
    + GetDefense(): int
}

Class DeckCreator {
    + AddStack(String Name): Stack
    + AddSortableStack(String Name): Stack
    + AddShufflableStack(String Name): Stack
}

Main o-- StandardGame: Creates
Main o-- ConsoleDisplay: Creates


ConsoleDisplay *-- Console
Game *-- Display
Game "1" *-- "many" Player : Has many >

Player "1" *-- "1" Deck : Has a >
Game o-down- CardFactory
Game *-down- DeckCreator

DeckCreator *-down- Stack
DeckCreator *-down- SortableStack
DeckCreator *-down- ShuffleableStack
DeckCreator *-down- Deck

Deck "1" o-- "Many" Stack : Contains many >
Deck "1" *-- "Many" ICard : Contains >
Stack "1" *-- "Many" ICard : Contains references to  >
Stack *-down- SortableStack
Stack *-down- ShuffleableStack

StandardCard .up.|> ICard
CardDecorator .up.|> ICard
CardFactory *-down- StandardCard : Creates >
CardFactory *-down- AttackDecorator : Creates >
CardFactory *-down- CostDecorator : Creates >
CardFactory *-down- DefenseDecorator : Creates >

@enduml