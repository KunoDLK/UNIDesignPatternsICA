@startuml

class Main {
    + Main(): void
}

interface IGame {
    
}

class Console {
    + WriteLine(string value)
    + Write(string value)
    + ReadLine(): string
    + Clear()
    {static} +ForegroundColor: ConsoleColor
    {static} +BackgroundColor: ConsoleColor
}

interface IDisplay {
    + DisplayPlayer(): void
    + GetCardChoice(Stack: choices): Card
}

class Player {
    - readonly name: string
    - readonly deck: Deck
    + Player(name: string, deck: Deck)
    + Name: string
    + Deck: Deck
}

class Deck {
    - allCards: List<Card>
    + Stacks: List<Stack>
    + GetStack(string stackName): stack 
    + AddStack(string Name): void
}

class Stack {
    - stackCards: List<Card>
    + StackSize: int
    + StackName: string
    + AddCard(Card: card): void
    + AddCard(IEnumarble<Card>: cards): void
    + GetNextCard(): Card
    + Shuffle(): void
    + Sort(): void
}

class CardFactory
{
    - ConstuctedCard: Card
    + NewCard(): void
    + AddAttackDecorator(double: offset, Action: condition (Optional)): void
    + AddAttackDecorator(double: multiplyer, Action: condition (Optional)): void
    + AddDefenseDecorator(double: offset, Action: condition (Optional)): void
    + AddDefenseDecorator(double: multiplyer, Action: condition (Optional)): void
    + AddTrapAbilityDecorator(Action: Condition, Action: TrapAction): void
    + GetConstructedCard(): Card
}

interface ICard {
    + Id: guid
    + Name: string
    + Description: string
    + GetUseCost(): int
    + GetUseAttack(): int
    + GetDefense(): int
}

abstract CardDecorator {
    + Id: guid
    + Name: string
    + DecorationName: String
    + Multaplyer: double
    + Offset: double
    + Condition: Action
    + CardDecorator(double multiplyer, double: offset)
    + AddCondition(Action: Condition): void 
    + Virtual GetUseCost(): int
    + Virtual GetUseAttack(): int
}

class AttackDecorator extends CardDecorator {
    + GetUseAttack(): int
}

class CostDecorator extends CardDecorator {
    + GetUseCost(): int
}

class TrapAbilityDecorator extends CardDecorator {
    + TrapAbility: Action
    + GetUseCost(): int
    + GetUseAttack(): int
    + GetDefense(): int
}

class StandardCard {
    + Id: guid
    + Name: string
    + StandardCard(double: UseCost, double: AttackDamage)
    + GetUseCost(): int
    + GetUseAttack(): int
    + GetDefense(): int
}


Main *-- StandardGame: Creates
Main *-- ConsoleDisplay: Creates
ConsoleDisplay *-- Console
IGame *-- IDisplay

ConsoleDisplay .|> IDisplay
StandardGame .|> IGame

IGame "1" *-- "many" Player : Has many >

Player "1" *-- "1" Deck : Has a >
Deck "1" *-- "Many" Stack : Contains many >

Deck "1" *-- "Many" ICard : Contains many >
Stack "1" *-- "Many" ICard : Contains references to  >

StandardCard .|> ICard
CardDecorator .|> ICard
CardFactory "1" *-- "Many" StandardCard : Creates >
CardFactory "1" *-- "Many" AttackDecorator : Creates >
CardFactory "1" *-- "Many" CostDecorator : Creates >
CardFactory "1" *-- "Many" TrapAbilityDecorator : Creates >

@enduml