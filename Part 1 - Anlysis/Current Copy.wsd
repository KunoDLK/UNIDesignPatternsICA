@startuml

class MainClass {
    + static readonly StarterCards: Card[]
    + GetStarterDeck(): List<Card>
    + GetPrompt(prompt: string, validResponse: string[]): string
    + Main(args: string[]): void
}

class Console {
    + WriteLine(string value)
    + Write(string value)
    + ReadLine(): string
    + Clear()
    {static} +ForegroundColor: ConsoleColor
    {static} +BackgroundColor: ConsoleColor
}

class Player {
    - const MaxMana: int
    - readonly name: string
    - manaAvailable: int
    - manaTicker: int
    - health: int
    - readonly deck: Deck
    - readonly hand: Hand
    - readonly inPlay: InPlay
    - readonly graveyard: Graveyard
    + Player(name: string, deck: Deck)
    + Name: string
    + ManaAvailable: int
    + Health: int
    + Deck: Deck
    + Hand: Hand
    + InPlay: InPlay
    + Graveyard: Graveyard
    + NewGame(): void
    + AddMana(): void
    + UseMana(amount: int): void
    + DrawCard(): void
    + Damage(amount: int): bool
    + ToString(): string
}

class Deck {
    + allCards: List<Card>
    + Stacks: List<Stack>
    + GetStack(string stackName): Stack
    + AddStack(Stack stack)
}

class Stack {
    + stackCards: List<Card>
    + StackSize: int
    + StackName: string
    + AddCard(Card: card)
    + AddCard(IEnumarble<Card>: cards)
    + GetNextCard(): Card
}

class SortableStack {
    + Sort()
}

class ShuffleableStack {
    + Shuffle()
}

interface ICard {
    + Id: guid
    + Name: string
    + Description: string
    + GetUseCost(): int
    + GetUseAttack(): int
    + GetDefense(): int
}

class StandardCard {
    + Id: guid
    + Name: string
    + StandardCard(double: UseCost, double: AttackDamage)
    + GetUseCost(): int
    + GetUseAttack(): int
    + GetDefense(): int
}

abstract CardDecorator {
    + Id: guid
    + Name: string
    + DecorationName: String
    + Multaplyer: double
    + Offset: double
    + Condition: Action
    + CardDecorator(double multiplyer, double: offset)
    + AddCondition(Action: Condition)
    + Virtual GetUseCost(): int
    + Virtual GetAttack(): int
    + Virtual GetDefense(): int
}

class AttackDecorator extends CardDecorator {
    + GetUseAttack(): int
}

class CostDecorator extends CardDecorator {
    + GetUseCost(): int
}

class DefenseDecorator extends CardDecorator {
    + GetDefense(): int
}

class CardFactory
{
    - ConstuctedCard: Card
    + NewCard()
    + AddAttackDecorator(double: offset, Action: condition (Optional))
    + AddAttackDecorator(double: multiplyer, Action: condition (Optional))
    + AddDefenseDecorator(double: offset, Action: condition (Optional))
    + AddDefenseDecorator(double: multiplyer, Action: condition (Optional))
    + AddTrapAbilityDecorator(Action: Condition, Action: TrapAction)
    + GetConstructedCard(): Card
}

StandardCard .up.|> ICard
CardDecorator .up.|> ICard
CardFactory o-down- StandardCard : Creates >
CardFactory o-down- AttackDecorator : Creates >
CardFactory o-down- CostDecorator : Creates >
CardFactory o-down- DefenseDecorator : Creates >

MainClass "1" *-- "many" Player : Creates and drivers >
MainClass "1" *-- "many" CardFactory : Creates posible cards for a players deck >
MainClass "1" *-- "many" Deck : Creates a deck for each player >
MainClass "1" *-- "1" Console : Reads user input <
MainClass "1" *-- "1" Console : Writes output >
MainClass *-down- Stack : Creates >
MainClass *-down- SortableStack : Creates >
MainClass *-down- ShuffleableStack : Creates >
Player "1" *-- "1" Deck : Has a >
Deck "1" o-- "Many" Stack : Contains many >
Deck "1" *-- "Many" ICard : Contains >
Stack "1" *-- "Many" ICard : Contains references to  >
Stack *-down- SortableStack
Stack *-down- ShuffleableStack

@enduml